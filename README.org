* Identify Fastq

Because people have differing opinions on compression algorithms or
pooling lanes together it can be difficult to determine how closely
related fastq files are.

This was my implement in a couple of minutes solution that should work
for fastq files generated from Illumina HiSeqs. 

I compute the md5sum of the contents of the file, and I count the
number of times I see a "lane". and for each fastq file output a block
like:

01b71b35a4e9327f1f0615a73f5295c1 encode3-pipeline-comparison/hg19/20130920/GM12878_Long_Total_SMARTseq_2x100_ENCLB043ZZZ_Wold.fastqRd2.gz
  None: 1
  C1JE0ACXX_1_2_TAAGGCG: 23556929
  C1JE0ACXX_2_2_TAAGGCG: 28751016
  C2812ACXX_2_2_TAAGGCG: 21575822
  C2812ACXX_3_2_TAAGGCG: 21851577

That fastq contains the second end reads for 2 lanes on 2 flowcells.

** What is a "lane"

The HiSeq has a standard read ID format.

For example:

@HWI-ST354R:434:C2812ACXX:2:1101:1459:2043 1:N:0:TAGGCAT

Before the space is the official "read id", after the space is some
additional metadata. It should be:

Machine ID:
Not sure.
Flowcell ID
Lane ID
Tile
X (or Y)
Y (or X)
(space)
Read number (for paired end)
Did this read pass the quality filter.
Not sure.
Sequence Multiplex barcode.

To reasonably uniquely identify a sample I decided to use a tuple of
consisting of:

Flowcell ID, Lane ID, Read number, sequence multiplex.

Including the sequence multiplex means there can be a bunch of low
count records as the multiplex barcode can have errors. For example
the program might output a block like:

   C24LTACXX_2_1_TGGGCATG: 5081
   C24LTACXX_2_1_TNGGCATG: 459
   C24LTACXX_2_1_TTGGCATG: 3316

Mostly I just ignored those low results.

* Installation

You'll need my library autoopen in order to run this program. It's
available at https://github.com/detrout/autoopen and it should be
installable with python setup.py install.
